// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database/db.db"
}

model User {
  id              Int           @id @default(autoincrement())
  firstName       String?
  lastName        String?
  email           String        @unique
  password        String
  image           Image         @relation(fields: [imageId], references: [id])
  bio             String?
  gender          String?
  birthDate       DateTime?
  isBlocked       Boolean       @default(false)
  roleId          Int
  role            Role          @relation(fields: [roleId], references: [id])
  session         Session[]
  imageId         Int
  UserMessage     UserMessage[]
  trainerChatRoom ChatRoom[]    @relation("ChatRoomTrainer")
  UserChatRoom    ChatRoom[]    @relation("ChatRoomUser")
}

model Message {
  id           Int           @id @default(autoincrement())
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userMessages UserMessage[]
}

model UserMessage {
  id         Int      @id @default(autoincrement())
  messageId  Int
  message    Message  @relation(fields: [messageId], references: [id])
  authorId   Int
  createdAt  DateTime @default(now())
  chatRoomId Int
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  User       User     @relation(fields: [authorId], references: [id])

  @@unique([authorId, messageId])
  @@index([authorId])
  @@index([messageId])
}

model ChatRoom {
  id           Int           @id @default(autoincrement())
  UserMessages UserMessage[]
  createdAt    DateTime      @default(now())
  trainerId    Int
  userId       Int
  trainer      User          @relation("ChatRoomTrainer", fields: [trainerId], references: [id])
  user         User          @relation("ChatRoomUser", fields: [userId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  User      User[]
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  permissions Permission[]
}

model PermissionType {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Permission Permission[]
}

model PermissionAction {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Permission Permission[]
}

model Permission {
  id                 Int              @id @default(autoincrement())
  roleId             Int
  permissionTypeId   Int
  permissionActionId Int
  role               Role             @relation(fields: [roleId], references: [id])
  permissionType     PermissionType   @relation(fields: [permissionTypeId], references: [id])
  permissionAction   PermissionAction @relation(fields: [permissionActionId], references: [id])
}
